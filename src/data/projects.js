import picasso from '../imgs/picasso_samp.png'
import tranquil from '../imgs/tranquil.png'
import gol from '../imgs/gol.png'
import bookmaker from '../imgs/bookmaker.JPG'
import cinopsis from '../imgs/cinopsis.png'
import stubborntrader from '../imgs/stubborntrader.png'
import p5 from '../imgs/p5.png'

export const projects = [
    { title: 'The False Artist Iterations', info: 'My tracking of a Java application intended to simulate an artist painting to a canvas. The algorithms in play make use of pixel ordering, color mapping, drawing to vectors, flood-filling, and image chunking to attempt a naturalistic time-lapse. Updates to the program will be periodically uploaded to the YouTube channel found in my contact information.', technologies: 'Java, Processing', deployed: "Undeployed", image: picasso, link: 'https://www.youtube.com/watch?v=gYhLhg12laI&t=1s'},
    { title: 'Tranquil Sequences', info: 'A website designed for mobile viewing that lists popular number sequences along with their title, description, and the stringifed algorithm used to produce a sample of the sequence. The application was made less for outside consumption and more for enabling my desire to write numerical algorithms. It makes use of Angular\'s component modularity and servicing for quick data entry', technologies: 'Angular 9', deployed: "Deployed", image: tranquil, link: 'https://ryansmane.github.io/ng-NumberSequencing/'},
    { title: 'Conway\'s Game of Life', info: 'Another Angular project that animates a Game of Life simulation without en expanding grid. As opposed to Tranquil Sequences, this application handles user input to draw the initial grid, provide the initial seed, and begin/end/reset the simulation as the user wishes. At the heart of the program, there is a simulation algorithm I designed that handles neighbor checking and step-wise changes to the grid based on previous iterations.', technologies: 'Angular9', deployed: 'Deployed', image: gol, link: 'https://ryansmane.github.io/ngGame-Of-Life/' },
    { title: 'Bookmaker', info: 'My capstone project at General Assembly. A full-stack application intended to ease the process of finding literary agents for authors. Its backend was built in Python\'s Django Rest Framework using a PostgreSQL database and handles user creation, password hashing, validation, and categorization into an Agent or Author model. Agents may create their Agent profiles and join pre-listed agencies while authors can browse these agencies, saving agents as they go in a React-made environment that utilizes async/await, localStorage, Hooks, trees, and token authorization. Authors may then compose an e-mail using a handwritten text compiler before mass-sending their book\'s pitch to their list of saved agents using Google\'s Gmail API.', technologies: 'Python, Django-Rest-Framework, ReactJS, PostrgreSQL, Google API, React Bootstrap', deployed: 'Deployed but currently down for security reasons related to the Gmail API', image: bookmaker, link: '#'},
    { title: 'Cinopsis', info: 'My third project at GA. A full-stack application with a React frontend and Node-Express RESTful backend using a MongoDB database. Bcrypt is used to handle user hashing and validation in the backend while React Bootstrap is used to present tidy forms and input fields for user login, registration, and submission. The idea behind the website is a movie rating application that allows users to submit movie ideas and also rate the movie ideas of other users. This called for delicate modeling between users, ratings, and movies and intricate backend algorithms behind several routes that calculated the appropriate average rating for each film. The frontend build was made in similar fashion to my capstone\'s, using Hooks, localStorage, component trees, and async/await for API requests. Unit tests were also written for every frontend component and every backend route until full passes were acquired.', technologies: 'ReactJS, Node/Express, MongoDB, Bcrypt, React Bootstrap, Mobile-First Design', deployed: 'Deployed', image: cinopsis, link: 'https://pjl4.github.io/moviesFrontend/' },
    { title: 'StubbornTrader', info: 'My first React application - with API calls to Tradier, a stock history catalog. The website is intended for calculating present financial outcomes given parameters based on user input such as ticker choice, weekly investment amount, and start date of investing. The application displays calculated and relevant portfolio data such as shares held, equity, and profit in tabular-color-coded form and offers the user the option to save their results to another table always present on the screen. Though this table does no persist upon refresh, it allows the user to have a productive session of estimations without losing his choices over time. The website also has a mobile design which is admittedly untrustworthy and tacky, but was implemented to practice some patterns of mobile simplification.', technologies: 'React, Tradier API', image: stubborntrader, link: 'https://stubborntrader.herokuapp.com/'},
    { title: 'Hangman', info: 'Sample Project Idea2', image: p5 }
];
